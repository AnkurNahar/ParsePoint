{
  "team_id": "aline123",
  "items": [
    {
      "title": "Book Chapter 1",
      "content": "BEYOND CRACKING the CODING INTERVIEW Pass Tough CODING Interviews, get noticed, and Negotiate succesfully SNEAK PEEK amazon.com/dp/195570600X 0 INTERVIEW CHECKLIST BEYOND CRACKING THE CODING INTERVIEW 1 STUDY PLAN BEYOND CRACKING THE CODING INTERVIEW BOOSTERS CRACKING THE CODING INTERVIEW 189 PROGRAMMING QUESTIONS AND SOLUTIONS CRACKING THE PM CAREER THE SKILLS, FRAMEWORKS, AND PRACTICES TO BECOME A GREAT PRODUCT MANAGER CRACKING THE PM INTERVIEW HOW TO LAND A PRODUCT MANAGER JOB IN TECHNOLOGY CRACKING THE TECH CAREER INSIDER ADVICE ON LANDING A JOB AT GOOGLE, MICROSOFT, APPLE, OR ANY TOP TECH COMPANY BEYOND CRACKING the CODING INTERVIEW GAYLE L. MCDOWELL MIKE MROCZKA ALINE LERNER NIL MAMANO CareerCup, LLC Palo Alto, CA BEYOND CRACKING THE CODING INTERVIEW Copyright © 2025 by CareerCup. All rights reserved. No part of this book may be reproduced in any form by any electronic or me- chanical means, including information storage and retrieval systems, without permission in writing from the author or publisher, except by a reviewer who may quote brief passages in a review. Published by CareerCup, LLC, Palo Alto, CA. Compiled Jun 3, 2025. For more information, or to enquire about bulk or university copies, contact support@careercup.com. Please report bugs or issues at beyondctci.com. 978-1955706001 (ISBN 13) To my favorite coders, Davis and Tobin— Gayle To my dog, my wife, and our readers (and not necessarily in that order)— Mike To my two wonderful kids (or if I have more, then whichever two are the most wonderful)— Aline Als meus pares— Nil WHAT’S INSIDE I. \\_\\_init\\_\\_() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 README . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 Hello World. Hello Reader. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12 Crash & Learn: Our Failed Interviews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 II. Ugly Truths & Hidden Realities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 Ch 0. Why Job Searches Suck. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 Ch 1. A Brief History of Technical Interviews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 Ch 2. What’s Broken About Coding Interviews. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 Ch 3. What Recruiters Won’t Tell You . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 Ch 4. What Interviewers Won’t Tell You. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32 Ch 5. Mindset and the Numbers Game. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 III. Job Searches, Start to Finish . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 Ch 6. Resumes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 Ch 7. Getting in the Door . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 Ch 8. Mechanics of the Interview Process . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68 Ch 9. Managing Your Job Search. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78 IV. Offers & Negotiation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96 Ch 10. Components of the Offer. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98 Ch 11. The What & Why of Negotiation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .108 Ch 12. Pre-Offer Negotiation Mistakes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .111 Ch 13. Getting the Offer: Exactly What to Say . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .120 Ch 14. How to Negotiate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .123 V. Behavioral Interviews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136 Ch 15. When and How They Matter. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .138 Ch 16. Content: What to Say . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .141 Ch 17. Communication: How to Say It . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .154 VI. Principles of Coding Interviews. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166 Technical README. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .168 Ch 18. How to Practice. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .170 Ch 19. How You Are Evaluated. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .180 Ch 20. Anatomy of a Coding Interview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .190 Ch 21. Big O Analysis. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .206 Ch 22. Boundary Thinking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .231 Ch 23. Trigger Thinking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .243 Ch 24. Problem-Solving Boosters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .249 VII. Catalog of Technical Topics. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280 Ch 25. Dynamic Arrays. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .282 Ch 26. String Manipulation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .288 Ch 27. Two Pointers. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .294 Ch 28. Grids & Matrices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .312 Ch 29. Binary Search . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .326 Ch 30. Sets & Maps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .345 Ch 31. Sorting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .361 Ch 32. Stacks & Queues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .379 Ch 33. Recursion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .392 Ch 34. Linked Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .412 Ch 35. Trees. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .429 Ch 36. Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .456 Ch 37. Heaps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .489 Ch 38. Sliding Windows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .509 Ch 39. Backtracking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .537 Ch 40. Dynamic Programming. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .564 Ch 41. Greedy Algorithms. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .584 Ch 42. Topological Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .598 Ch 43. Prefix Sums . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .610 VIII. exit() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 624 Acknowledgments. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .626 Post-Mortem Example Log . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .629 Reference Materials . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .630 My Notes & Reminders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .639 You can access all of our online materials and bonus chapters here: Talk with the authors, get help if you're stuck, and geek out with us on Discord. bctci.cobctci.co/discord Get $50 Off on Mock Interviews Practice anonymously on interviewing.io with FAANG interviewers: bctci.co/discount-X3A4 \\_\\_INIT\\_\\_() Interview Replay: Recordings of actual mock interviews. Snippet: Material that you can copy/paste online, including email templates and code recipes. Resource: Bonus chapters, worksheets, and other material. Problems, Solutions, and AI Interviewer: You can try every problem in the book with the AI Interviewer. Solutions are online in four languages (Python, Java, JavaScript, and C++). Watch for these speech-bubble icons, which mean there is online content. PAR T I \\_\\_INIT\\_\\_ !\" I README This is a big book, and yes, it needs an instruction manual. We ask (beg?) you to read this. We'll keep it short and to the point. We also know lots of books have online materials, and they're often junk. We promise this isn't the case with ours. Before we do that, we’d like to address the relationship between this book and interviewing.io. Yo u ' l l s e e a l o t o f r e fe r e n c e s t o i t . T h i s b o o k i s n o t from interviewing.io, but we do partner with them for access to lots of data, interview replays, and an AI Interviewer. Because of this relationship, we know that sometimes mentioning interviewing.io might sound promotional. We’ve tried to avoid that as much as we could. We hope—trust—that you'll forgive this in exchange for access to lots of data, resources, and tools (and the discount code). The book is roughly split into two segments: the # rst segment (Parts I–V) is the soft squishy stu$ (backed up by a lot of qualitative and quantitative data). The second segment (Parts VI and onwards) is the technical content, which has its own README (pg 168). Please read it before diving into those parts. ONLINE MATERIALS AND DISCUSSION You can access all of our online materials and bonus chapters here: Talk with the authors, get help if you're stuck, and geek out with us on Discord. bctci.co bctci.co/discord \\_\\_INIT\\_\\_!\" ▸ README 11 ICONS Whenever you see an icon wrapped in a speech bubble, it means that there’s online content that goes with it, like so: Problems, Solutions, and AI Interviewer: Each problem in the book has a Python solution (without any fancy Python-speci# c tricks). We also provide Java, JavaScript, and C++ solutions online. We encourage you to try each problem with AI Interviewer and to only look at the solution if you get stuck. Interview Replay: These are recordings of actual mock interviews from interviewing.io’s collection, conducted by engineers from FAANG and other top companies. We use them to showcase real-life examples of successes and mistakes. Snippet: These are snippets that you can copy and paste. Sometimes they’re code. Sometimes they’re text that you can steal verbatim (e.g., emails to recruiters). Resource or document: These are bonus chapters, downloadable problem sets, or worksheets (e.g., an equity calculator, a calculator to help you # gure out the order in which to approach companies). BUGS, QUESTIONS, AND CONTACT Website:beyondctci.com Bugs:bctci.co/bugs Errata: bctci.co/errata Email: beyond@gayle.com Get $50 o! anonymous mock interviews on interviewing.io While this book gives you the tools and strategies to tackle tough tech- nical questions, it is essential to put these tools into practice. With the purchase of this book, you get $50 o$ on interviewing.io mock inter- views. There, you can practice anonymously with FAANG interviewers. Even if you don’t use interviewing.io, # nd a way to practice with another person; grinding problems by yourself quickly reaches the point of diminishing returns. bctci.co/discount-X3A4 I HELLO WORLD. HELLO READER. The only thing worse than technical interviews is not having technical interviews. Oscar Wilde(ish) Always stay gracious, best revenge is your paper. Beyoncé Knowles-Carter Cracking the Coding Interview (CtCI) has been the industry leader in teaching engineers how to get into top tech companies for over a decade. It's referenced in almost every major interview prep source, includ- ing books, podcasts, blogs, and online courses, as the source of truth on how to get into the major tech companies in our industry. And—although this was never the intention—it's even been used as a classroom textbook and a question bank for companies to draw on. So, why write another interview prep book? And why now? While CtCI remains an excellent foundation for interview preparation, the landscape of technical interviews has evolved dramatically since its publication. Online interview resources have changed how candidates practice, and the questions asked in interviews have grown both in di% culty and variety. And, as more candidates are preparing for interviews than ever before, the bar for passing has risen accordingly. But it’s not just the questions that have changed. The process of landing a job at top tech companies has grown even more competitive. The technical interview format has sparked increasing debate, and AI is reshaping how people apply for jobs, how companies screen candidates, and even how interviews are conducted. Amidst these shifts, we felt it was time to take a step back and rethink what a modern interview prep book should look like—one that complements existing resources and patches the gaps between what candidates are doing and what they need to be doing. We realized that a new edition wouldn’t cut it. It would have to be a brand new book, and this book would have to: • Focus on understanding, not memorization. We aim to teach you the computer science fundamentals and the interview skills needed to excel, regardless of your educational background. By building a deep understanding of these concepts, you’ll be prepared to tackle problems you’ve never seen before— something memorization alone can’t achieve. \\_\\_INIT\\_\\_!\" ▸ HELLO WORLD. HELLO READER. 13 •Cover important non-technical topics. CtCI only brie&y touched on what some call the “squishy” stu$—resumes, negotiation, and managing your job search. This book devotes ~150 pages to these topics because they are now critical to success. We’ll guide you through technical recruiting with practi- cal advice, down to exactly what to say in the situations you’re likely to encounter. • Ground our advice in data. This book draws on a decade of insights from real-world inter views, includ- ing a corpus of over 100,000 interviews conducted on interviewing.io by senior engineers from FAANG+ companies. You’ll get a data-driven perspective on what technical interviews look like at top companies today. Now, to address the angry elephant in the room: technical interviews are &awed, right? Absolutely. We don' t just acknowledge that; we're going to dive into a candid discussion of everything wrong with technical interviews, and what you can do about it. Despite what some have suggested, CtCI didn't invent this format—nor is BCtCI going to end it. As far as we can tell, technical interviewing isn't going anywhere. But we hope to make the process a little less daunting and a lot more transparent—by leveling the playing #eld and giving you access to what was previously insider knowledge. We hope that you’re able to put away your hatred of the format, read this book with an open mind, put in the work, and get your revenge... by nailing your interviews, fearlessly negotiating, and landing the high-paying, challenging, awesome job that you deserve. Before we get on with the real stu$, we have one request for you. Do not read this book—at least not in the traditional sense of left-to-right, top-to-bottom, page-to-page. Rather, we implore you to do this book. Use it. Interact with it. This is so important that we have a literal README on how to use it. We hope you enjoy reading doing this book, inasmuch as one can enjoy a book about interviews and job searches. We really enjoyed writing building it. I CRASH & LEARN: OUR FAILED INTERVIEWS Everyone loves a success story, but failure is often the best teacher. We will share here our most humbling interview experiences—times we bombed, blanked, or were simply unprepared. These stories aren’t just about the mistakes we made; they’re about the lessons we learned and how those failures shaped us. Our hope is that by sharing these moments, you’ll see that even \"experts\" have stumbled, arguably in career- altering ways. More importantly, you’ll learn that just as these interview failures don't re& ect on our skills as engineers, nor do yours. GAYLE Entering my fourth year of a # ve-year undergrad/master's program, I was fortunate to have three Microsoft internships behind me. Determined to try something new for my # nal internship, I sent countless cold emails and resumes into the void of online applications. Somehow, Google picked mine. I was thrilled. From the bits I'd heard about technical interviewing, questions could be anything from implementing an ArrayList to the heavy-ball brainteaser 1 . Imagine my surprise when, instead, I got a math question: \"What is 2^20?\" My answer was the always-brilliant \"Um, I don't know? Can I use a calculator?\" All I could think about was what a stupid question this was and how I de# nitely didn't know the answer. And why should I? Who cares? Just look it up if you need to know it. (Sound familiar?) What I didn't realize then was that—probably—my interviewer wasn't expecting me to just know this. Most likely, she wanted me to start from what I did know, perhaps that 2 10 is about 1000. From there, if I knew my exponent rules, I could solve it: 2 20 = 2 10 \\* 2 10 is about 1000 \\* 1000... so approximately 1 million. In her mind, it was a problem-solving question—albeit one that relied on a lot of math 2 . But in my mind, I didn't know the answer, and I was supposed to, and . All I needed to do was focus on what I could solve rather than what I knew. Still a stupid question though 3 . 1 Given a balance (i.e., a scale that only tells you which side is heavier) and eight balls—all the same weight other than one which is slightly heavier—# nd the heavy ball in as few measurements as possible. 2 In general, asking math-heavy questions is a no-no for interviews. However, I'll let her o$ the hook here, a little. I was a computer science major with a math minor. If I didn't know exponent rules, something had gone very wrong. 3 Why is this a bad question? Put aside the \"it's not relevant\" part. The relevant factor is: is it predictive? Approached the right way, this could be a problem solving question. However, it didn't feel like that to me—and perception matters. Additionally, even if I had approached it as a problem-solving question, there is very little \"meat\" to the question; what distinguishes between good and bad other than understanding how to break up the exponents? \\_\\_INIT\\_\\_!\" ▸ CRASH & LEARN: OUR FAILED INTERVIEWS 15 MIKE In my #rst year of college as a CS student, I was the only student to get an opportunity to interview at Google for their internship position 4 —and I was ecstatic about it. The problem? I hadn't taken my data structures and algorithms class yet. My GPA took a colossal hit that semester as I spent way too much time cutting class to watch YouTube lectures on sorting algorithms and NP-hard problems in an attempt to prepare for my interview. The interview day came, and I had two back-to-back meetings with di$erent Googlers. I described the optimal solution for my #rst interview, which I nervously coded in C++ with a hashmap—but then the second inter- viewer stumped me with a binary tree question 5 . After much fumbling, the interviewer walked me through a viable way to solve the problem, which I coded, but I knew I had bombed my chance at a Google internship. A few years later, I passed Google’s full-time interviews twice—declining the #rst o$er for a remote role at Salesforce and accepting the second for a permanent position at Google. ALINE After graduating from MIT, I spent three years cooking professionally. While my culinary detour could #ll a book, I wasn’t good enough at it to make it a career. Out of money, I returned to coding. Coming o$ three years of &ipping pans, chopping food, and drinking nightly, I found myself back in a well-lit o%ce, standing at a whiteboard, asked to reverse a linked list. Not only had I forgotten what these interviews were like (I was expecting to talk about my past projects), but I completely blanked on what a linked list was, much less how to reverse one. And this particular interview was with Sasha Aickin, Red#n’s CTO, back when they were like #ve people. It’s one of the things I still kick myself for, every now and again. To his credit, Sasha patiently explained how linked lists work, and, through a series of hints, got me to change pointer directions. I clumsily erased and redrew arrowheads, but I don’t think I wrote much code. It was too little, too late. I never forgot how shitty failing that interview felt. I also never forgot how gracious Sasha was, in the face of my failure, and how he patiently walked me through the problem by asking leading questions. Both of those experiences helped me come up with the idea for interviewing.io: a place where people could fail privately, without the stigma, and learn from those failures, by pairing with kind, empathetic people who care. NIL Nil insists that he’s never failed an interview. We would like to clarify that it ’s because he’s only done one—and passed. True to his name, Nil has exactly zero failure stories to share. Classic edge case. 4 For the curious, I sent over 100+ cold email messages to former alumni until someone was willing to refer me. Even back then, I was using the techniques we show you in this book. 5 I was asked to compute the maximum sum of any path in the tree, which did not necessarily start at the root but could include it. For a variant of that problem, see Problem 35.1: Aligned Chain (pg 436). UGLY TRUTHS & HIDDEN REALITIES Interview Replay: Recordings of actual mock interviews. Snippet: Material that you can copy/paste online, including email templates and code recipes. Resource: Bonus chapters, worksheets, and other material. Problems, Solutions, and AI Interviewer: You can try every problem in the book with the AI Interviewer. Solutions are online in four languages (Python, Java, JavaScript, and C++). Watch for these speech-bubble icons, which mean there is online content. PAR T II UGLY TRUTHS & HIDDEN REALITIES I",
      "content_type": "book",
      "source_url": "",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Book Chapter 2",
      "content": "CHAPTER 0 WHY JOB SEARCHES SUCK Job searches suck—especially for engineers, who are, by and large, rational, well-intentioned people who expect the world to function according to some set of predictable rules. Why do job searches suck so much? •Job searches are not deterministic, and neither are interview outcomes. In job searches, e$ ort doesn’t always correlate with results. For technical interviews speci# cally, there’s little predictability in how the same person will perform from interview to interview (pg 26). • No feedback loop. When you apply online and don't get a response, you can't tell if you weren’t a # t or if no one even saw your application. Your insecurities can convince you that not only did a human look, but they quickly sized you up, saw right through you, and lasered in on every single & aw to conclude (correctly, in your mind) that you’re un# t for the job. When you interview, whether you pass or get rejected, you often don’t know why, which makes it di% cult to know how to prepare the next time. • The content of your resume is often eclipsed by the brands in it. If you don’t have brand-name companies or schools, it’s much harder to get noticed. Recruiters are notoriously bad at making value judgments based on resumes 1 . Despite these shortcomings, resumes are still the gold standard, and that means candidates from non-traditional backgrounds enter the game with a signi# cant disadvantage. • To g e t i n t h e d o o r, y o u v e r y l i k e l y h a v e t o k n o w s o m e o n e . Surprisingly, this is even true for candidates who look good on paper; recruiters often ignore online applications because the signal-to-noise ratio is so poor. But it’s especially true if you don’t look good on paper. • Technical interviews are notoriously ! awed and not representative of the actual engineering work you do every day. This one is especially rough, and it bears out in our data. Senior engineers often do worse than juniors in their # rst few interviews because junior engineers have more recently completed an algorithms class or have done extensive interview prep. Senior engineers have been in the trenches, often focusing on building applications; there are very few engineering roles where you’re doing the types of academic problems that you get in interviews day in and day out. These are just a few of the challenges, but the strategies in this book will help you navigate them and achieve success—however you de# ne it. Given all these & aws, you might ask: How did we get here, where our technical interviews feel so divorced from the work and so unpredictable in their outcomes? For that, let’s take a brief look at the history of technical interviewing. 1 See https://www.reddit.com/r/recruitinghell/comments/qhg5jo/this\\_resume\\_got\\_me\\_an\\_interview/",
      "content_type": "book",
      "source_url": "",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Book Chapter 3",
      "content": "CHAPTER 1 I",
      "content_type": "book",
      "source_url": "",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Book Chapter 4",
      "content": "CHAPTER 1 I",
      "content_type": "book",
      "source_url": "",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Book Chapter 5",
      "content": "CHAPTER 1 A BRIEF HISTORY OF TECHNICAL INTERVIEWS A de# nitive work on the history of technical interviewing was surprisingly hard to # nd, but we were able to piece together a narrative by scouring books like How Would You Move Mount Fuji, Programming Interviews Exposed, and the bounty of the internets. The story goes something like this. Technical interviewing has its roots as far back as the 1950s, at Shockley Semiconductor Laboratories in Mountain View, California. William Shockley’s 1 interviewing methodology came out of the need to keep up with the innovative, rapidly moving, Cold War-fueled tech sector, something that traditional hiring approaches taken from established, skills-based assembly line industries simply couldn’t handle. And so, Shockley relied on questions that could gauge analytical ability, intellect, and potential quickly. One canonical question 2 in this category has to do with coins: You have eight identical-looking coins, except one is lighter than the rest. Figure out which one it is with just two weighings on a pan balance. The techniques that Shockley developed were adopted by Microsoft during the 1990s, as the success of the desktop computer, and later, the # rst dot-com boom spurred an explosion in tech hiring. Like Shockley, Microsoft also needed to quickly and scalably assess high volumes of candidates for potential. As soft- ware engineering became increasingly complex, it was no longer possible to have a few centralized expert programmers manage the design and then delegate away the minutiae. Even rank-and-# le developers needed to be able to produce under a variety of rapidly evolving conditions, where just mastery of speci# c skills wasn’t enough. The puzzle format, in particular, was easy to standardize because individual hiring managers didn’t have to come up with their own interview questions, and a company could quickly build up its own interchangeable question repository. Over time, most companies did away with puzzle questions 3 for engineers, and moved to algorithmic questions: these questions seemed more relevant but still assessed problem-solving skills. At many top companies, such as Google, this need for interchangeable parts ultimately carried over to the interview process as well—rather than having individual teams run their own processes and pipelines, 1 We are acutely aware that this is the same William Shockley who became the poster boy for eugenics. He was a pretty awful person. 2 A # rst attempt—if you're an engineer—is to do something akin to binary search: split the coins into two sets of four coins each. Then, take the lighter set, and divide it into two sets of two coins each. Then, split in half again. But that will be three weighings, not two. To reduce a weighing, consider that the balance will also tell us if the sets are equal. We can divide the coins into three sets. 3 https://www.nytimes.com/2013/06/20/business/in-head-hunting-big-data-may-not-be-such-a-big-deal.html 20 BEYOND CRACKING THE CODING INTERVIEW ▸ UGLY TRUTHS & HIDDEN REALITIES View online materials for Beyond Cracking the Coding Interview at bctci.co companies standardized it. This way, in addition to questions, you could e$ectively plug and play the inter- viewers themselves—any interviewer within your org could be quickly trained up and assigned to speak with any candidate, independent of the prospective team. At the same time, companies didn’t always create incentives for engineers to work hard at being good interviewers, and as you’ll see later in this book, we believe that much of the &ak that algorithmic interviews get is due to the interviewers conducting them (and, often, lack of training or proper incentives). So where does this leave us? Technical interviews are, at best, a proxy for the day-to-day tasks that a software engineer actually does, and not all interviewers are good. But, regardless, do technical interviews work? Well, that's complicated and depends a lot on your de#nition of \"work.\" For whom, the candidate or the company? For what type of company? Compared to what? We would argue that interviewing as a whole is &awed, and it's really a matter of picking your poison. However, even the most ardent defenders 4 of these sorts of technical interviews agree that false nega- tives—great engineers who get rejected—are common. FAANGs and other companies who adopt these processes tolerate a high false negative rate, under the rationale that it's better to reject a good candidate than to hire a bad one. The process is optimized to reduce false positives. For you, the candidate, that kind of sucks. But it is what it is, and that's what this book is here for: to help you avoid being one of those false negatives. 4 Let's call out the elephant in the room. Some might assume that, as authors of a coding interview book, we must adamantly believe in the value of coding interviews. Not so. Not only has our intimate look at coding interviews exposed many &aws, but the entire existence of coding interview prep means that coding interviews are, at least, a little bit broken.",
      "content_type": "book",
      "source_url": "",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Book Chapter 6",
      "content": "CHAPTER 2 I",
      "content_type": "book",
      "source_url": "",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Book Chapter 7",
      "content": "CHAPTER 2 I",
      "content_type": "book",
      "source_url": "",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Book Chapter 8",
      "content": "CHAPTER 2 WHAT'S BROKEN ABOUT CODING INTERVIEWS This chapter dives into the systemic & aws of technical interviews, from the prevalence of bad questions and bad interviewers to the randomness of interview outcomes and the growing interview-industrial complex. But it’s not all doom and gloom. Once you understand the challenges and accept that the system is & awed, you’ll be able to operate within it and win (and do so with con# dence and integrity). IT’S NOT THE WORK YOU DO EVERY DAY One of the most persistent critiques of technical interviews is that they feel disconnected from the work you do every day. If interviews were like the work you did every day, we’d expect that senior engineers would outperform juniors in interviews. As it turns out, that’s not the case: frustratingly, the more experienced you are, the worse you perform. We actually have data for this. If you look at performance in their # rst mock interview on interviewing.io, junior engineers signi# cantly outperform senior ones. In the upcoming graph, you can see the average score that candidates got in their # rst mock interview on interviewing.io, broken out by seniority. Not only do junior engineers signi# cantly outperform experienced engineers, 1 but experienced engineers perform the worst out of all the groups. 1 At this point, you’re probably thinking that the bar is di$ erent for more junior engineers. At some companies, it is. At some, it is not. Our interviewers know the experience level of their candidates and adjust their bar accordingly when giving feedback. With that in mind, new grads likely do the best in interviews because they’re fresh o$ a data structures and algorithms course. 22 BEYOND CRACKING THE CODING INTERVIEW ▸ UGLY TRUTHS & HIDDEN REALITIES View online materials for Beyond Cracking the Coding Interview at bctci.co This e$ ect gets less pronounced as people practice more; once everyone has done a bunch of mock inter- views, they all roughly converge, as you can see in the next graph. But, out of the gate, recency with the material gives you a signi# cant advantage.",
      "content_type": "book",
      "source_url": "",
      "author": "",
      "user_id": ""
    }
  ]
}